name: channel-risk-sync-monitor

on:
  workflow_call:
    inputs:
      git-ref:
        default: '${{ github.ref }}'
        description: The branch to checkout.
        required: false
        type: string
      issue-assignee:
        default: ''
        description: The issue assignee in the form '@name'.
        required: false
        type: string
      snap-name:
        default: ""
        description: The Snap name.
        required: false
        type: string
      snap-risk-aspirant:
        default: candidate
        description: Snap Store channel risk used as aspirant.
        required: false
        type: string
      snap-risk-target:
        default: stable
        description: Snap Store channel risk used as reference.
        required: false
        type: string
      snap-track:
        default: latest
        description: Snap Store channel track to monitor.
        required: false
        type: string
      snapcraft-source-subdir:
        default: "."
        description: The directory of the Snapcraft project.
        required: false
        type: string
      threshold:
        default: 10
        description: The threshold to trigger the issue (in days).
        required: false
        type: number

jobs:
  compare:
    runs-on: 'ubuntu-latest'
    permissions:
      issues: write
    steps:

      - name: Install dependencies
        run: sudo snap install yq

      - name: Check snap name input
        if: "${{ inputs.snap-name != '' }}"
        run: echo "snap-name=${{ inputs.snap-name }}" >> "$GITHUB_OUTPUT"

      - name: Checkout
        if: "${{ inputs.snap-name == '' }}"
        uses: actions/checkout@v4
        with:
          ref: '${{ inputs.git-ref }}'

      - name: Find and parse snapcraft.yaml to retrieve the name
        if: "${{ inputs.snap-name == '' }}"
        id: parse
        env:
          project_root: ${{ inputs.snapcraft-source-subdir }}
        run: |
          # If no project path is specified, default to top-level of repo
          project_root="${project_root:-.}"

          valid_paths=(
            "${project_root}/.snapcraft.yaml"
            "${project_root}/build-aux/snap/snapcraft.yaml"
            "${project_root}/snap/snapcraft.yaml"
            "${project_root}/snapcraft.yaml"
          )

          for file in "${valid_paths[@]}"; do
            if [[ -f "$file" ]]; then
              yaml_path="$file"
            fi
          done

          if [[ -z "${yaml_path}" ]]; then
            echo "No snapcraft.yaml found"
            exit 1
          fi

          name="$(yq -r '.name' ${yaml_path})"

          if [ -z "${name}" ]; then exit 1; fi

          echo "Found snap name '${name}'."

          echo "snap-name=${name}" >> "$GITHUB_OUTPUT"

      - name: Get the snap publication dates
        id: dates
        env:
          SNAP_APIRANT_CHANNEL: "${{ inputs.snap-track }}/${{ inputs.snap-risk-aspirant }}"
          SNAP_NAME: "${{ steps.parse.outputs.snap-name }}"
          SNAP_TARGET_CHANNEL: "${{ inputs.snap-track }}/${{ inputs.snap-risk-target }}"
        run: |
          PUB_DATE="$(snap info ${SNAP_NAME} | yq '.channels[env(SNAP_TARGET_CHANNEL)]' | awk '{print $2}')"

          DATE_REGEX="^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"

          # @todo(artivis) handle '^' which means that the risk follows the one above
          if ! [[ ${PUB_DATE} =~ ${DATE_REGEX} ]]; then
            echo "The date '${PUB_DATE}' on channel '${SNAP_TARGET_CHANNEL}' does not match the expect format 'YYYY-MM-DD'."
            exit 1
          fi

          echo "Channel '${SNAP_TARGET_CHANNEL}' publish date: ${PUB_DATE}"

          echo "snap-target-pub-date=${PUB_DATE}" >> "$GITHUB_OUTPUT"

          PUB_DATE="$(snap info ${SNAP_NAME} | yq '.channels[env(SNAP_APIRANT_CHANNEL)]' | awk '{print $2}')"

          if ! [[ ${PUB_DATE} =~ ${DATE_REGEX} ]]; then
            echo "The date '${PUB_DATE}' on channel '${SNAP_TARGET_CHANNEL}' does not match the expect format 'YYYY-MM-DD'."
            exit 1
          fi

          echo "Channel '${SNAP_APIRANT_CHANNEL}' publish date: ${PUB_DATE}"

          echo "snap-aspirant-pub-date=${PUB_DATE}" >> "$GITHUB_OUTPUT"

      - name: Compare publication dates
        id: compare
        env:
          SNAP_APIRANT_CHANNEL: "${{ inputs.snap-track }}/${{ inputs.snap-risk-aspirant }}"
          SNAP_ASPIRANT_PUB_DATE: "${{ steps.dates.outputs.snap-aspirant-pub-date }}"
          SNAP_TARGET_CHANNEL: "${{ inputs.snap-track }}/${{ inputs.snap-risk-target }}"
          SNAP_TARGET_PUB_DATE: "${{ steps.dates.outputs.snap-target-pub-date }}"
          THRESHOLD: ${{ inputs.threshold }}
        run: |

          # Convert the dates to seconds since epoch
          SNAP_ASPIRANT_PUB_DATE_SECONDS=$(date -d "${SNAP_ASPIRANT_PUB_DATE}" +%s)
          SNAP_TARGET_PUB_DATE_SECONDS=$(date -d "${SNAP_TARGET_PUB_DATE}" +%s)

          # Calculate the difference in days
          DIFF_SECS=$((SNAP_ASPIRANT_PUB_DATE_SECONDS - SNAP_TARGET_PUB_DATE_SECONDS))
          DIFF_DAYS=$((DIFF_SECS / 86400))

          # Compare the difference in days to the threshold
          if (( ${DIFF_DAYS} >= ${THRESHOLD} )); then
            echo "The channel '${SNAP_TARGET_CHANNEL}'"\
            "is outdated compared to '${SNAP_APIRANT_CHANNEL}'"\
            "(${DIFF_DAYS} >= ${THRESHOLD})."
            echo "is-outdated=1" >> "$GITHUB_OUTPUT"
          else
            echo "is-outdated=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Open issue
        if: steps.compare.outputs.is-outdated == '1'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAP_APIRANT_CHANNEL: "${{ inputs.snap-track }}/${{ inputs.snap-risk-aspirant }}"
          SNAP_TARGET_CHANNEL: "${{ inputs.snap-track }}/${{ inputs.snap-risk-target }}"
        run: |
          search_issue="$(gh issue --repo ${{ github.repository }} list --state open \
            --search '${SNAP_APIRANT_CHANNEL} in:title' --json number)"

          if [[ ! "${search_issue}" =~ "number" ]]; then

            echo "Creating a new issue."

            extra_args=""
            if [ ! -z "${{ inputs.issue-assignee }}" ]; then
              extra_args="${extra_args} --assignee ${{ inputs.issue-assignee }}"
            fi

            echo -e "## Monitoring report\n\n" \
            "- Author: @${{ github.triggering_actor }}\n" \
            "- Target channel: '${SNAP_TARGET_CHANNEL}'\n" \
            "- Aspirant channel: '${SNAP_APIRANT_CHANNEL}'\n" \
            "- Workflow Path: '${{ github.workflow_ref }}'\n\n" \
            "The channel '${SNAP_TARGET_CHANNEL}' is outdated compared to '${SNAP_APIRANT_CHANNEL}'.\n" \
            "Please consider promoting the snap.\n\n" \
            "Workflow details at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            | \
            gh issue --repo ${{ github.repository }} create \
              --title "[CI] Consider promoting '${SNAP_APIRANT_CHANNEL}' to '${SNAP_TARGET_CHANNEL}'." \
              ${extra_args} \
              --body-file -
          else
            echo "Issue already opened."
          fi
